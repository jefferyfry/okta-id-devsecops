template: true
valuesFilePath: values.yml

resources:
  - name: codeRepo
    type: GitRepo
    configuration:
      path: {{ .Values.GitHub.path }}
      gitProvider: {{ .Values.GitHub.gitProvider }}
      branches:
        include: master
  - name: dockerImage
    type: Image
    configuration:
      registry: {{ .Values.Artifactory.intName }}
      sourceRepository: {{ .Values.Artifactory.devRepo }}
      imageName: {{ .Values.app.dockerImageName }}
      imageTag: ${run_number}
      autoPull: true
  - name: buildInfo
    type: Buildinfo
    configuration:
      sourceArtifactory: {{ .Values.Artifactory.intName }}
      buildName: {{ .Values.app.buildName }}
      buildNumber: ${run_number}
  - name: promotedBuildInfo
    type: Buildinfo
    configuration:
      sourceArtifactory: {{ .Values.Artifactory.intName }}
      buildName: {{ .Values.app.buildName }}
      buildNumber: ${run_number}

pipelines:
  - name: okta_id_devsecops_app_build
    steps:
      - name: app_docker_build
        type: DockerBuild
        configuration:
          affinityGroup: docker_build
          dockerFileLocation: {{ .Values.app.dockerFileLocation }}
          dockerFileName: Dockerfile
          dockerImageName: {{ .Values.app.dockerImageName }}
          dockerImageTag: ${run_number}
          inputResources:
            - name: codeRepo
          integrations:
            - name: {{ .Values.Artifactory.intName }}
        execution:
          onSuccess:
            - echo "Congrats the Docker image was built!"
      - name: app_docker_push
        type: DockerPush
        configuration:
          affinityGroup: docker_build
          autoPublishBuildInfo: true
          forceXrayScan: true
          targetRepository: {{ .Values.Artifactory.devRepo }}
          integrations:
            - name:  {{ .Values.Artifactory.intName }}
          inputSteps:
            - name: app_docker_build
          outputResources:
            - name: dockerImage
            - name: buildInfo
        execution:
          onSuccess:
            - echo "Congrats the Docker image was pushed!"
      - name: publish_build_info
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: app_docker_push
          outputResources:
            - name: buildInfo
      - name: app_promote
        type: PromoteBuild
        configuration:
          targetRepository:      {{ .Values.Artifactory.prodRepo }}
          includeDependencies:   true
          status:                Passed
          comment:               Artifact passed Xray Scan
          copy:                  true
          inputResources:
            - name: buildInfo
          outputResources:
            - name: promotedBuildInfo
        execution:
          onSuccess:
            - echo "Congrats the Docker image was promoted!"
      - name: eks_deploy
        type: Bash
        configuration:
          integrations:
            - name: {{ .Values.AWS.intName }}
            - name: {{ .Values.AWS.eks }}
          inputResources:
            - name: codeRepo
          inputSteps:
            - name: app_promote
        execution:
          onExecute:
            - cd $res_codeRepo_resourcePath
            - pwd
            - ls
            - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
            - chmod +x ./aws-iam-authenticator
            - mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            - sed "s|imageName|{{ .Values.app.dockerImageName }}:${run_number}|g" deployment.yml > my-deployment.yml
            - cat my-deployment.yml
            - aws eks update-kubeconfig --name workshop --region us-west-2
            - kubectl get namespaces
            - kubectl get nodes
            - kubectl create namespace test
            - kubectl apply -f my-deployment.yml --namespace  okta-workshop
            - while [ -z "$url" ]; do url=$(kubectl describe service workshop-app --namespace  okta-workshop | grep 'LoadBalancer Ingress:' | awk '{printf "https://%s",$3;}'); sleep 2; done
            - echo "$url"
            - echo "Workshop App launched!"
          onSuccess:
            - echo "Congrats the Docker image was deployed!"
